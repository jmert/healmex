function alms = map2alm(map, order, lmax, mmax, nside, niter)
% alms = map2alm(map, order, lmax, mmax, nside, niter)
%
% INPUTS
%   map     An Nx1 or Nx3 matrix of map pixel values. Column 1 is assumed to
%           be the intensity map, and columns 2 and 3 are assumed to be the
%           Stokes Q and U fields, respectively.
%
%   order   HEALPix map pixelization order, either 'RING' or 'NESTED'.
%           Defaults to 'RING'.
%
%   lmax    The maximum degree harmonic coefficient to compute. Defaults to
%           3*nside-1 if not provided.
%
%   mmax    The maximum order harmonic coefficient to compute. Defaults to
%           lmax if not provided.
%
%   nside   HEALPix nside of the map. Inferred from length of dimension one
%           of map if not provided.
%
%   niter   Number of iterations to perform in convergence to spherical
%           harmonic coefficients. Defaults to 1.
%
% OUTPUTS
%   alms    The spherical harmonic coefficients of map. If map is Nx1, then
%           alms is an Mx1 vector of scalar (non-spin) coefficients (i.e.
%           temperature). If map is Nx3, the column 1 is the scalar (non-spin)
%           coefficients, and columsn 2 and 3 are the gradient and curl,
%           respectively, spin-2 transforms.
%
% EXAMPLE
%

  if ~exist('order', 'var') || isempty(order)
    order = 'RING';
  end
  if ~exist('niter', 'var') || isempty(niter)
    niter = 1;
  end

  if ~exist('nside', 'var') || isempty(nside)
    nside = @CLASSPREFIX@npix2nside(size(map, 1));
  end

  if ~exist('lmax', 'var') || isempty(lmax)
    lmax = 3 * nside - 1;
  end
  if ~exist('mmax', 'var') || isempty(mmax)
    mmax = lmax;
  end

  % TODO: Allow real ring weights.
  rwghts = ones(4 * nside - 1, 1);

  if size(map, 2) == 1
    % T-only alms - pass through empty/dummy pol maps
    mapT = map(:,1);
    mapQ = double([]);
    mapU = double([]);
  elseif size(map, 2) == 3
    % T + Pol maps case
    mapT = map(:,1);
    mapQ = map(:,2);
    mapU = map(:,3);
  else
    error('map: Expected size 1 or 3 in second dimension, got %d', ...
        size(map, 2));
  end

  [almsT,almsG,almsC] = libhealmex(int64(53), ...
      int64(nside), char(order), double(mapT), double(mapQ), double(mapU), ...
      int32(lmax), int32(mmax), double(rwghts), int32(niter));

  if size(map, 2) == 1
    alms = almsT;
  else
    alms = [almsT almsG almsC];
  end
end
