function maps = alm2map(alms, nside, varargin)
% maps = alm2map(alms, nside, varargin)
%
% INPUTS
%   alms    The spherical harmonic coefficients of map. If map is Nx1, then
%           alms is an Mx1 vector of scalar (non-spin) coefficients (i.e.
%           temperature). If map is Nx3, the column 1 is the scalar (non-spin)
%           coefficients, and columns 2 and 3 are the gradient and curl,
%           respectively, spin-2 transforms.
%
%   nside   HEALPix Nside of output map to synthesize.
%
% KEY-VALUE PAIRS
%   'lmax'  The maximum degree harmonic coefficient to compute. Optional if
%           inferrable by alm_getlmmax().
%
%   'mmax'  The maximum order harmonic coefficient to compute. Optional if
%           inferrable by alm_getlmmax().
%
% OUTPUTS
%   maps    An Nx1 or Nx3 matrix of map pixel values. Column 1 is assumed to
%           be the intensity map, and columns 2 and 3 are assumed to be the
%           Stokes Q and U fields, respectively.
%
% EXAMPLE

  p = inputParser();
  addParameter(p, 'lmax', [], @(x) isnumeric(x) & isscalar(x));
  addParameter(p, 'mmax', [], @(x) isnumeric(x) & isscalar(x));
  parse(p, varargin{:});
  opt = p.Results;

  [lmax, mmax] = @CLASSPREFIX@alm_getlmmax(alms, opt.lmax, opt.mmax);

  if size(alms, 2) == 1
    % T-only alms - pass through empty/dummy complex alms as almsG & almsC
    almsT = complex(double(alms));
    almsG = complex(double([]));
    almsC = complex(double([]));
  elseif size(alms, 2) == 3
    % T + Pol alms case
    almsT = complex(double(alms(:,1)));
    almsG = complex(double(alms(:,2)));
    almsC = complex(double(alms(:,3)));
  else
    error('alms: Expected size 1 or 3 in second dimension, got %d', ...
        size(alms, 2));
  end

  [mapT, mapQ, mapU] = libhealmex(int64(55), ...
      int32(lmax), int32(mmax), ...
      complex(double(almsT)), complex(double(almsG)), complex(double(almsC)), ...
      int64(nside));

  if size(alms, 2) == 1
    maps = mapT;
  else
    maps = [mapT mapQ mapU];
end
