function alms = map2alm(maps, varargin)
% alms = map2alm(maps, ...)
%
% INPUTS
%   maps    A vector (Nx1) or matrix (Nx3) of maps pixel values. Must be in
%           RING order.
%
% KEY-VALUE PAIRS
%   'lmax'  The maximum degree harmonic coefficient to compute. Defaults to
%           3*nside-1 if not provided.
%
%   'mmax'  The maximum order harmonic coefficient to compute. Defaults to
%           lmax if not provided.
%
%   'iter'  Defaults to 3. Number of iterations to perform in convergence to
%           spherical harmonic coefficients, where 0 iterations is a single
%           analysis transform without any iterative updates.
%
% OUTPUTS
%   alms    The spherical harmonic coefficients of maps. If maps is Nx1, then
%           alms is an Mx1 vector of scalar (non-spin) coefficients (i.e.
%           temperature). If maps is Nx3, the column 1 is the scalar (non-spin)
%           coefficients, and columsn 2 and 3 are the gradient and curl,
%           respectively, spin-2 transforms.
%
% EXAMPLE

  arguments
    maps     (:,:) {mustBeNumeric}
    opt.lmax       {mustBeNumeric,mustBeScalarOrEmpty} = []
    opt.mmax       {mustBeNumeric,mustBeScalarOrEmpty} = []
    opt.iter       {mustBeNumeric,mustBeScalarOrEmpty} = 3
  end

  lmax = opt.lmax;
  mmax = opt.mmax;
  iter = opt.iter;
  nside = @PACKAGEPREFIX@npix2nside(size(maps, 1));

  if isempty(lmax)
    lmax = 3 * nside - 1;
  end
  if isempty(mmax)
    mmax = lmax;
  end

  % TODO: Allow real ring weights.
  rwghts = ones(4 * nside - 1, 1);

  if size(maps, 2) == 1
    % T-only alms - pass through empty/dummy pol maps
    mapT = maps(:,1);
    mapQ = double([]);
    mapU = double([]);
  elseif size(maps, 2) == 3
    % T + Pol maps case
    mapT = maps(:,1);
    mapQ = maps(:,2);
    mapU = maps(:,3);
  else
    throwAsCaller(MException('healmex:map2alm:dimensionMismatch', ...
        'Expected maps to have size 1 or 3 in second dimension, got %d', size(maps, 2)));
  end

  [almsT,almsG,almsC] = libhealmex(int64(53), ...
      int64(nside), double(mapT), double(mapQ), double(mapU), ...
      int32(lmax), int32(mmax), double(rwghts), int32(iter));

  if size(maps, 2) == 1
    alms = almsT;
  else
    alms = [almsT almsG almsC];
  end
end
